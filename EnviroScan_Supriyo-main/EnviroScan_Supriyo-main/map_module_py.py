# -*- coding: utf-8 -*-
"""map_module.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1glu16Ayq7zXG5cTqA8K83rDsRFZwYsJP
"""

import folium
from folium.plugins import HeatMap
import pandas as pd
def generate_pollution_map(predictions_file, output_file="pollution_map.html"):
    """
    Creates a Folium map with heatmap and source-specific markers.

    Args:
        predictions_file (str): Path to CSV file with predictions (must include latitude, longitude, aqi_proxy, pollution_source).
        output_file (str): Output HTML file for saving the interactive map.
    """
    # Load data
    df = pd.read_csv(predictions_file)

    if "latitude" not in df.columns or "longitude" not in df.columns:
        raise ValueError("Dataset must include latitude and longitude columns.")

    # Center map on mean coordinates
    center_lat, center_lon = df["latitude"].mean(), df["longitude"].mean()
    pollution_map = folium.Map(location=[center_lat, center_lon], zoom_start=11)

    # --- Heatmap layer ---
    if "aqi_proxy" in df.columns:
        heat_data = df[["latitude", "longitude", "aqi_proxy"]].dropna().values.tolist()
        HeatMap(heat_data, radius=12, blur=18, max_zoom=12).add_to(pollution_map)

    # --- Source-specific markers ---
    color_map = {
        "Industrial": "red",
        "Traffic": "blue",
        "Agricultural": "green",
        "Mixed/Other": "gray"
    }

    for _, row in df.iterrows():
        src = row.get("pollution_source", "Unknown")
        aqi = row.get("aqi_proxy", "N/A")
        popup_text = f"""
        <b>Source:</b> {src}<br>
        <b>AQI Proxy:</b> {aqi:.2f if isinstance(aqi, (int,float)) else aqi}
        """
        folium.CircleMarker(
            location=[row["latitude"], row["longitude"]],
            radius=6,
            color=color_map.get(src, "black"),
            fill=True,
            fill_color=color_map.get(src, "black"),
            fill_opacity=0.7,
            popup=popup_text
        ).add_to(pollution_map)

    # Save map
    pollution_map.save(output_file)
    print(f"âœ… Pollution map saved as {output_file}")
    return pollution_map

