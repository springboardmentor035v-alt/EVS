# Project: AI-EnviroScan
# Model: Random Forest
# Tool: Google Colab
# -*- coding: utf-8 -*-
"""dashboard.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DDHyw_svk5zJOqspuNaV_xbqU-8hoqqq
"""

!pip install streamlit folium pandas matplotlib seaborn

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from map_module import generate_pollution_map

def run_dashboard(predictions_file="final_predictions.csv"):
    st.title("🌍 Real-Time Pollution Dashboard")

    # Load data
    df = pd.read_csv(predictions_file)

    # Sidebar filters
    st.sidebar.header("Filters")
    selected_source = st.sidebar.multiselect("Select Pollution Source", df["pollution_source"].unique())
    date_range = st.sidebar.date_input("Select Date Range")

    # Apply filters
    if selected_source:
        df = df[df["pollution_source"].isin(selected_source)]

    if "timestamp" in df.columns and len(date_range) == 2:
        start, end = pd.to_datetime(date_range[0]), pd.to_datetime(date_range[1])
        df["timestamp"] = pd.to_datetime(df["timestamp"], errors="coerce")
        df = df[(df["timestamp"] >= start) & (df["timestamp"] <= end)]

    # --- Alerts ---
    if "aqi_proxy" in df.columns:
        if (df["aqi_proxy"] > 200).any():
            st.error("⚠️ High pollution alert! AQI exceeds hazardous levels.")
        elif (df["aqi_proxy"] > 100).any():
            st.warning("⚠️ Moderate pollution detected. Stay cautious.")
        else:
            st.success("✅ Air quality is safe.")

    # --- Charts ---
    st.subheader("📊 Pollution Source Distribution")
    fig, ax = plt.subplots()
    df["pollution_source"].value_counts().plot.pie(autopct="%1.1f%%", ax=ax)
    st.pyplot(fig)

    if "aqi_proxy" in df.columns and "timestamp" in df.columns:
        st.subheader("📈 AQI Trends Over Time")
        fig, ax = plt.subplots()
        sns.lineplot(data=df, x="timestamp", y="aqi_proxy", ax=ax)
        st.pyplot(fig)

    # --- Interactive Map ---
    st.subheader("🗺️ Geospatial Heatmap")
    map_file = "pollution_map.html"
    generate_pollution_map(predictions_file, output_file=map_file)
    with open(map_file, "r", encoding="utf-8") as f:
        st.components.v1.html(f.read(), height=500)

    # --- Download reports ---
    st.subheader("📥 Download Reports")
    st.download_button("Download CSV", data=df.to_csv(index=False), file_name="pollution_report.csv", mime="text/csv")
